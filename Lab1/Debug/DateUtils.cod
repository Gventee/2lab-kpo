; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34435.0 

	TITLE	C:\Users\gvent\OneDrive\Desktop\KPO\Lab1\Lab1\Debug\DateUtils.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__3A77C584_concurrencysal@h DB 01H
__7D61E6FE_sal@h DB 01H
__F85DFF2E_vadefs@h DB 01H
__E62C82FD_vcruntime@h DB 01H
__02F1C7E0_xkeycheck@h DB 01H
__0731AE6E_yvals_core@h DB 01H
__1B0272D9_corecrt@h DB 01H
__B9985323_float@h DB 01H
__1C7C89ED_cfloat DB 01H
__3E26BF77_limits@h DB 01H
__DACAF7EF_climits DB 01H
__BCF39F11_vcruntime_new@h DB 01H
__86CDF331_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__C5864FDA_crtdefs@h DB 01H
__7A030B0F_use_ansi@h DB 01H
__E86563A2_yvals@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__5E25D51D_cstdlib DB 01H
__810D3946_xtr1common DB 01H
__020D51C1_intrin0@inl@h DB 01H
__DCABF6D1_intrin0@h DB 01H
__1FDBE849_cmath DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__6F38426A_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__731D38DD_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__12B77DFD_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__F5B39439_cwchar DB 01H
__B673110F_iosfwd DB 01H
__FBEE0FB0_cstddef DB 01H
__20B1B3B7_initializer_list DB 01H
__80509148_stdint@h DB 01H
__E37B3460_cstdint DB 01H
__4C58012B_type_traits DB 01H
__69285096_utility DB 01H
__9DF8D3B1___msvc_iter_core@hpp DB 01H
__EC88E9B5_xutility DB 01H
__FD245EF5_iterator DB 01H
__F7972D0B_share@h DB 01H
__CB3B79BB___msvc_system_error_abi@hpp DB 01H
__F2193691_cerrno DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__412BB509_eh@h DB 01H
__8E23F663_vcruntime_exception@h DB 01H
__0DD9214C_exception DB 01H
__F8F3CAFF___msvc_sanitizer_annotate_container@hpp DB 01H
__39B162D3___msvc_string_view@hpp DB 01H
__7A9AC489_limits DB 01H
__8483113F_new DB 01H
__07D5AD9A_xatomic@h DB 01H
__03BD3355_xmemory DB 01H
__776EB5C9_xstring DB 01H
__84971B11_stdexcept DB 01H
__44A9703E_xcall_once@h DB 01H
__40F076AD_xerrc@h DB 01H
__5F635487___msvc_threads_core@hpp DB 01H
__0A9237D2_time@h DB 01H
__D9687441_ctime DB 01H
__5A4C0AF4_xtimec@h DB 01H
__1B4D3CBC_xthreads@h DB 01H
__11AF984B_atomic DB 01H
__FBF4621E_system_error DB 01H
__8916352E_vcruntime_typeinfo@h DB 01H
__9C571AAC_typeinfo DB 01H
__C634C807_memory DB 01H
__EA719F08_xfacet DB 01H
__0FD15498___msvc_xlocinfo_types@hpp DB 01H
__1EC467ED_ctype@h DB 01H
__60F3A5CD_cctype DB 01H
__791C33B7_locale@h DB 01H
__CD8909CC_clocale DB 01H
__83DEF964_xlocinfo DB 01H
__A850C1F8_xlocale DB 01H
__BA3B8E77_xiosbase DB 01H
__8637A3AD_streambuf DB 01H
__36D7A7EF_xlocnum DB 01H
__7C4E2B29_ios DB 01H
__BB401B3C_ostream DB 01H
__D8902E06_istream DB 01H
__8EF193AA_iostream DB 01H
__B2E74E9B_string DB 01H
__1DB5B2D7_xlocmon DB 01H
__27C35076_xloctime DB 01H
__2452E854_iomanip DB 01H
__1B3EED86_sstream DB 01H
__B7C10C64_stdafx@h DB 01H
__7275DC2C_DateUtils@h DB 01H
__8ED5CA96_YearUtils@h DB 01H
__C53B600F_DateUtils@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?_Valid_strftime_specifiers@std@@3QBDB DB 061H		; std::_Valid_strftime_specifiers
	DB	041H
	DB	062H
	DB	042H
	DB	063H
	DB	043H
	DB	064H
	DB	044H
	DB	065H
	DB	046H
	DB	067H
	DB	047H
	DB	068H
	DB	048H
	DB	049H
	DB	06aH
	DB	06dH
	DB	04dH
	DB	06eH
	DB	070H
	DB	072H
	DB	052H
	DB	053H
	DB	074H
	DB	054H
	DB	075H
	DB	055H
	DB	056H
	DB	077H
	DB	057H
	DB	078H
	DB	058H
	DB	079H
	DB	059H
	DB	07aH
	DB	05aH
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?dayOfYear@DateUtils@@YAHHHH@Z			; DateUtils::dayOfYear
PUBLIC	?daysUntilBirthday@DateUtils@@YAHHHHHH@Z	; DateUtils::daysUntilBirthday
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0GC@LEHJKL@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GC@IDPJHLAK@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp___calloc_dbg:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	?isLeapYear@YearUtils@@YA_NH@Z:PROC		; YearUtils::isLeapYear
EXTRN	?daysInMonth@YearUtils@@YAHHH@Z:PROC		; YearUtils::daysInMonth
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@IDPJHLAK@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@IDPJHLAK@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'42.34433\include\xlocnum', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 049H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GC@LEHJKL@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@LEHJKL@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program Fil'
	DB	'es\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42'
	DB	'.34433\include\xlocale', 00H		; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	016aH
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\gvent\OneDrive\Desktop\KPO\Lab1\Lab1\DateUtils.cpp
;	COMDAT ?daysUntilBirthday@DateUtils@@YAHHHHHH@Z
_TEXT	SEGMENT
tv79 = -232						; size = 4
_daysInCurrentYear$1 = -32				; size = 4
_birthdayDayOfYear$ = -20				; size = 4
_currentDayOfYear$ = -8					; size = 4
_currentDay$ = 8					; size = 4
_currentMonth$ = 12					; size = 4
_currentYear$ = 16					; size = 4
_birthdayDay$ = 20					; size = 4
_birthdayMonth$ = 24					; size = 4
?daysUntilBirthday@DateUtils@@YAHHHHHH@Z PROC		; DateUtils::daysUntilBirthday, COMDAT

; 17   :         int birthdayDay, int birthdayMonth) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000f	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __C53B600F_DateUtils@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00025	90		 npad	 1

; 18   :         int currentDayOfYear = DateUtils::dayOfYear(currentDay, currentMonth, currentYear);

  00026	8b 45 10	 mov	 eax, DWORD PTR _currentYear$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _currentMonth$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _currentDay$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?dayOfYear@DateUtils@@YAHHHH@Z ; DateUtils::dayOfYear
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	89 45 f8	 mov	 DWORD PTR _currentDayOfYear$[ebp], eax

; 19   :         int birthdayDayOfYear = DateUtils::dayOfYear(birthdayDay, birthdayMonth, currentYear);

  0003d	8b 45 10	 mov	 eax, DWORD PTR _currentYear$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 18	 mov	 ecx, DWORD PTR _birthdayMonth$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 14	 mov	 edx, DWORD PTR _birthdayDay$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?dayOfYear@DateUtils@@YAHHHH@Z ; DateUtils::dayOfYear
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	89 45 ec	 mov	 DWORD PTR _birthdayDayOfYear$[ebp], eax

; 20   : 
; 21   :         if (birthdayDayOfYear > currentDayOfYear) {

  00054	8b 45 ec	 mov	 eax, DWORD PTR _birthdayDayOfYear$[ebp]
  00057	3b 45 f8	 cmp	 eax, DWORD PTR _currentDayOfYear$[ebp]
  0005a	7e 0a		 jle	 SHORT $LN2@daysUntilB

; 22   :             return birthdayDayOfYear - currentDayOfYear;

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _birthdayDayOfYear$[ebp]
  0005f	2b 45 f8	 sub	 eax, DWORD PTR _currentDayOfYear$[ebp]
  00062	eb 61		 jmp	 SHORT $LN5@daysUntilB

; 23   :         }

  00064	eb 5f		 jmp	 SHORT $LN5@daysUntilB
$LN2@daysUntilB:

; 24   :         else if (birthdayDayOfYear == currentDayOfYear) {

  00066	8b 45 ec	 mov	 eax, DWORD PTR _birthdayDayOfYear$[ebp]
  00069	3b 45 f8	 cmp	 eax, DWORD PTR _currentDayOfYear$[ebp]
  0006c	75 06		 jne	 SHORT $LN4@daysUntilB

; 25   :             return 0; 

  0006e	33 c0		 xor	 eax, eax
  00070	eb 53		 jmp	 SHORT $LN5@daysUntilB

; 26   :         }

  00072	eb 51		 jmp	 SHORT $LN5@daysUntilB
$LN4@daysUntilB:

; 27   :         else {
; 28   :             int daysInCurrentYear = YearUtils::isLeapYear(currentYear) ? 366 : 365;

  00074	8b 45 10	 mov	 eax, DWORD PTR _currentYear$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?isLeapYear@YearUtils@@YA_NH@Z ; YearUtils::isLeapYear
  0007d	83 c4 04	 add	 esp, 4
  00080	0f b6 c8	 movzx	 ecx, al
  00083	85 c9		 test	 ecx, ecx
  00085	74 0c		 je	 SHORT $LN7@daysUntilB
  00087	c7 85 18 ff ff
	ff 6e 01 00 00	 mov	 DWORD PTR tv79[ebp], 366 ; 0000016eH
  00091	eb 0a		 jmp	 SHORT $LN8@daysUntilB
$LN7@daysUntilB:
  00093	c7 85 18 ff ff
	ff 6d 01 00 00	 mov	 DWORD PTR tv79[ebp], 365 ; 0000016dH
$LN8@daysUntilB:
  0009d	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv79[ebp]
  000a3	89 55 e0	 mov	 DWORD PTR _daysInCurrentYear$1[ebp], edx

; 29   :             return (daysInCurrentYear - currentDayOfYear) + DateUtils::dayOfYear(birthdayDay, birthdayMonth, currentYear + 1);

  000a6	8b 75 e0	 mov	 esi, DWORD PTR _daysInCurrentYear$1[ebp]
  000a9	2b 75 f8	 sub	 esi, DWORD PTR _currentDayOfYear$[ebp]
  000ac	8b 45 10	 mov	 eax, DWORD PTR _currentYear$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	50		 push	 eax
  000b3	8b 4d 18	 mov	 ecx, DWORD PTR _birthdayMonth$[ebp]
  000b6	51		 push	 ecx
  000b7	8b 55 14	 mov	 edx, DWORD PTR _birthdayDay$[ebp]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ?dayOfYear@DateUtils@@YAHHHH@Z ; DateUtils::dayOfYear
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c3	03 c6		 add	 eax, esi
$LN5@daysUntilB:

; 30   :         }
; 31   :     }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?daysUntilBirthday@DateUtils@@YAHHHHHH@Z ENDP		; DateUtils::daysUntilBirthday
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\gvent\OneDrive\Desktop\KPO\Lab1\Lab1\DateUtils.cpp
;	COMDAT ?dayOfYear@DateUtils@@YAHHHH@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_dayNumber$ = -8					; size = 4
_day$ = 8						; size = 4
_month$ = 12						; size = 4
_year$ = 16						; size = 4
?dayOfYear@DateUtils@@YAHHHH@Z PROC			; DateUtils::dayOfYear, COMDAT

; 7    :     int dayOfYear(int day, int month, int year) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0000f	b9 06 00 00 00	 mov	 ecx, 6
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __C53B600F_DateUtils@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00025	90		 npad	 1

; 8    :         int dayNumber = 0;

  00026	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dayNumber$[ebp], 0

; 9    :         for (int i = 1; i < month; ++i) {

  0002d	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 1
  00034	eb 09		 jmp	 SHORT $LN4@dayOfYear
$LN2@dayOfYear:
  00036	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@dayOfYear:
  0003f	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00042	3b 45 0c	 cmp	 eax, DWORD PTR _month$[ebp]
  00045	7d 18		 jge	 SHORT $LN3@dayOfYear

; 10   :             dayNumber += YearUtils::daysInMonth(i, year);

  00047	8b 45 10	 mov	 eax, DWORD PTR _year$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d ec	 mov	 ecx, DWORD PTR _i$1[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ?daysInMonth@YearUtils@@YAHHH@Z ; YearUtils::daysInMonth
  00054	83 c4 08	 add	 esp, 8
  00057	03 45 f8	 add	 eax, DWORD PTR _dayNumber$[ebp]
  0005a	89 45 f8	 mov	 DWORD PTR _dayNumber$[ebp], eax

; 11   :         }

  0005d	eb d7		 jmp	 SHORT $LN2@dayOfYear
$LN3@dayOfYear:

; 12   :         dayNumber += day;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _dayNumber$[ebp]
  00062	03 45 08	 add	 eax, DWORD PTR _day$[ebp]
  00065	89 45 f8	 mov	 DWORD PTR _dayNumber$[ebp], eax

; 13   :         return dayNumber;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _dayNumber$[ebp]

; 14   :     }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?dayOfYear@DateUtils@@YAHHHH@Z ENDP			; DateUtils::dayOfYear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 238  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00010	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __27C35076_xloctime
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	90		 npad	 1

; 239  :         _Cvt = _Lobj._Getcvt();

  0002b	8b f4		 mov	 esi, esp
  0002d	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00033	50		 push	 eax
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00047	83 c7 18	 add	 edi, 24			; 00000018H
  0004a	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0004f	8b f0		 mov	 esi, eax
  00051	f3 a5		 rep movsd

; 240  : 
; 241  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	85 c0		 test	 eax, eax
  0005a	74 57		 je	 SHORT $LN2@Getvals

; 242  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 243  :             _Months =

  0007d	8b f4		 mov	 esi, esp
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00095	83 c4 04	 add	 esp, 4
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 244  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 245  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a3	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 246  :         } else {

  000b1	eb 70		 jmp	 SHORT $LN3@Getvals
$LN2@Getvals:

; 247  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	83 c0 18	 add	 eax, 24			; 00000018H
  000b9	50		 push	 eax
  000ba	6a 00		 push	 0
  000bc	8b f4		 mov	 esi, esp
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000c7	3b f4		 cmp	 esi, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 248  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000dd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	83 c0 18	 add	 eax, 24			; 00000018H
  000e3	50		 push	 eax
  000e4	6a 00		 push	 0
  000e6	8b f4		 mov	 esi, esp
  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 249  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00107	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	83 c0 18	 add	 eax, 24			; 00000018H
  0010d	50		 push	 eax
  0010e	6a 00		 push	 0
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00115	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@Getvals:

; 250  :         }
; 251  :     }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0012c	3b ec		 cmp	 ebp, esp
  0012e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 238  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00010	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __27C35076_xloctime
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	90		 npad	 1

; 239  :         _Cvt = _Lobj._Getcvt();

  0002b	8b f4		 mov	 esi, esp
  0002d	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00033	50		 push	 eax
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00047	83 c7 18	 add	 edi, 24			; 00000018H
  0004a	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0004f	8b f0		 mov	 esi, eax
  00051	f3 a5		 rep movsd

; 240  : 
; 241  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	85 c0		 test	 eax, eax
  0005a	74 57		 je	 SHORT $LN2@Getvals

; 242  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 243  :             _Months =

  0007d	8b f4		 mov	 esi, esp
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00095	83 c4 04	 add	 esp, 4
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 244  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 245  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a3	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 246  :         } else {

  000b1	eb 70		 jmp	 SHORT $LN3@Getvals
$LN2@Getvals:

; 247  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	83 c0 18	 add	 eax, 24			; 00000018H
  000b9	50		 push	 eax
  000ba	6a 00		 push	 0
  000bc	8b f4		 mov	 esi, esp
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000c7	3b f4		 cmp	 esi, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 248  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000dd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	83 c0 18	 add	 eax, 24			; 00000018H
  000e3	50		 push	 eax
  000e4	6a 00		 push	 0
  000e6	8b f4		 mov	 esi, esp
  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 249  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00107	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	83 c0 18	 add	 eax, 24			; 00000018H
  0010d	50		 push	 eax
  0010e	6a 00		 push	 0
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00115	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@Getvals:

; 250  :         }
; 251  :     }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0012c	3b ec		 cmp	 ebp, esp
  0012e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -32					; size = 4
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 511  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0000f	b9 09 00 00 00	 mov	 ecx, 9
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __A850C1F8_xlocale
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00025	90		 npad	 1

; 512  :     // convert C string to _Elem sequence using _Cvtvec
; 513  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00026	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _strlen
  0002f	83 c4 04	 add	 esp, 4
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 514  : 
; 515  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  00038	8b f4		 mov	 esi, esp
  0003a	68 03 02 00 00	 push	 515			; 00000203H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@LEHJKL@C?3?2Program?5Files?2Microsoft?5Visu@
  00044	6a 02		 push	 2
  00046	6a 01		 push	 1
  00048	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 516  : 
; 517  :     if (!_Ptrdest) {

  0005f	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00063	75 06		 jne	 SHORT $LN5@Maklocstr

; 518  :         _Xbad_alloc();

  00065	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0006a	90		 npad	 1
$LN5@Maklocstr:

; 519  :     }
; 520  : 
; 521  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  0006b	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  0006e	89 45 e0	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  00071	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00073	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00076	83 e8 01	 sub	 eax, 1
  00079	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax
  0007c	8b 4d e0	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  0007f	83 c1 01	 add	 ecx, 1
  00082	89 4d e0	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00085	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00088	83 c2 01	 add	 edx, 1
  0008b	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  0008e	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00092	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 522  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  00094	8b 45 e0	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0009a	8a 11		 mov	 dl, BYTE PTR [ecx]
  0009c	88 10		 mov	 BYTE PTR [eax], dl

; 523  :     }

  0009e	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 524  : 
; 525  :     return _Ptrdest;

  000a0	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN1@Maklocstr:

; 526  : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 73   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0000f	b9 06 00 00 00	 mov	 ecx, 6
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __36D7A7EF_xlocnum
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00025	90		 npad	 1

; 74   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00026	8b f4		 mov	 esi, esp
  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	50		 push	 eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00032	83 c4 04	 add	 esp, 4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	83 c0 01	 add	 eax, 1
  0003f	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 75   : 
; 76   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00047	83 c0 03	 add	 eax, 3
  0004a	8b f4		 mov	 esi, esp
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@IDPJHLAK@C?3?2Program?5Files?2Microsoft?5Visu@
  00052	6a 02		 push	 2
  00054	6a 02		 push	 2
  00056	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  00059	51		 push	 ecx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00060	83 c4 14	 add	 esp, 20			; 00000014H
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 77   : 
; 78   :     if (!_Ptrdest) {

  0006d	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00071	75 06		 jne	 SHORT $LN2@Maklocwcs

; 79   :         _Xbad_alloc();

  00073	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00078	90		 npad	 1
$LN2@Maklocwcs:

; 80   :     }
; 81   : 
; 82   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 ec	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _wmemcpy
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 83   :     return _Ptrdest;

  0008d	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN1@Maklocwcs:

; 84   : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -128						; size = 8
__Ptrnext$ = -112					; size = 4
__Ptrdest$ = -100					; size = 4
__Mbst1$ = -88						; size = 8
__Wc$ = -72						; size = 2
__Bytes$ = -60						; size = 4
__Ptr1$ = -48						; size = 4
__Wchars$ = -36						; size = 4
__Count1$ = -24						; size = 4
__Count$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 529  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 7c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-132]
  00012	b9 21 00 00 00	 mov	 ecx, 33			; 00000021H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __A850C1F8_xlocale
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00032	90		 npad	 1

; 530  :     // convert C string to wchar_t sequence using _Cvtvec
; 531  :     size_t _Count;
; 532  :     size_t _Count1;
; 533  :     size_t _Wchars;
; 534  :     const char* _Ptr1;
; 535  :     int _Bytes;
; 536  :     wchar_t _Wc;
; 537  :     mbstate_t _Mbst1 = {};

  00033	33 c0		 xor	 eax, eax
  00035	89 45 a8	 mov	 DWORD PTR __Mbst1$[ebp], eax
  00038	89 45 ac	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 538  : 
; 539  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  0003b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _strlen
  00044	83 c4 04	 add	 esp, 4
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 e8	 mov	 DWORD PTR __Count1$[ebp], eax

; 540  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  0004d	8b 45 e8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00050	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  00053	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0005d	89 4d d0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00060	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00062	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  00065	2b 45 c4	 sub	 eax, DWORD PTR __Bytes$[ebp]
  00068	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  0006b	8b 4d d0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  0006e	03 4d c4	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00071	89 4d d0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00074	8b 55 dc	 mov	 edx, DWORD PTR __Wchars$[ebp]
  00077	83 c2 01	 add	 edx, 1
  0007a	89 55 dc	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:
  0007d	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00081	76 29		 jbe	 SHORT $LN3@Maklocstr

; 541  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  00083	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  00086	50		 push	 eax
  00087	8d 4d a8	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR __Count$[ebp]
  0008e	52		 push	 edx
  0008f	8b 45 d0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00092	50		 push	 eax
  00093	8d 4d b8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 __Mbrtowc
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	89 45 c4	 mov	 DWORD PTR __Bytes$[ebp], eax
  000a2	83 7d c4 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  000a6	7f 02		 jg	 SHORT $LN8@Maklocstr

; 542  :             break;

  000a8	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 543  :         }
; 544  :     }

  000aa	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 545  : 
; 546  :     ++_Wchars; // count terminating nul

  000ac	8b 45 dc	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 dc	 mov	 DWORD PTR __Wchars$[ebp], eax

; 547  : 
; 548  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  000b5	8b f4		 mov	 esi, esp
  000b7	68 24 02 00 00	 push	 548			; 00000224H
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@LEHJKL@C?3?2Program?5Files?2Microsoft?5Visu@
  000c1	6a 02		 push	 2
  000c3	6a 02		 push	 2
  000c5	8b 45 dc	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000cf	83 c4 14	 add	 esp, 20			; 00000014H
  000d2	3b f4		 cmp	 esi, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	89 45 9c	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 549  : 
; 550  :     if (!_Ptrdest) {

  000dc	83 7d 9c 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000e0	75 06		 jne	 SHORT $LN9@Maklocstr

; 551  :         _Xbad_alloc();

  000e2	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  000e7	90		 npad	 1
$LN9@Maklocstr:

; 552  :     }
; 553  : 
; 554  :     wchar_t* _Ptrnext = _Ptrdest;

  000e8	8b 45 9c	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000eb	89 45 90	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 555  :     mbstate_t _Mbst2  = {};

  000ee	33 c0		 xor	 eax, eax
  000f0	89 45 80	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000f3	89 45 84	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 556  : 
; 557  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  000f6	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  000f8	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  000fb	2b 45 c4	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000fe	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax
  00101	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00104	03 4d c4	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00107	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  0010a	8b 55 dc	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0010d	83 ea 01	 sub	 edx, 1
  00110	89 55 dc	 mov	 DWORD PTR __Wchars$[ebp], edx
  00113	8b 45 90	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  00116	83 c0 02	 add	 eax, 2
  00119	89 45 90	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:
  0011c	83 7d dc 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  00120	76 29		 jbe	 SHORT $LN6@Maklocstr

; 558  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  00122	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  00125	50		 push	 eax
  00126	8d 4d 80	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  00129	51		 push	 ecx
  0012a	8b 55 e8	 mov	 edx, DWORD PTR __Count1$[ebp]
  0012d	52		 push	 edx
  0012e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00131	50		 push	 eax
  00132	8b 4d 90	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 __Mbrtowc
  0013b	83 c4 14	 add	 esp, 20			; 00000014H
  0013e	89 45 c4	 mov	 DWORD PTR __Bytes$[ebp], eax
  00141	83 7d c4 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00145	7f 02		 jg	 SHORT $LN10@Maklocstr

; 559  :             break;

  00147	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 560  :         }
; 561  :     }

  00149	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:

; 562  : 
; 563  :     *_Ptrnext = L'\0';

  0014b	33 c0		 xor	 eax, eax
  0014d	8b 4d 90	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00150	66 89 01	 mov	 WORD PTR [ecx], ax

; 564  : 
; 565  :     return _Ptrdest;

  00153	8b 45 9c	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN1@Maklocstr:

; 566  : }

  00156	52		 push	 edx
  00157	8b cd		 mov	 ecx, ebp
  00159	50		 push	 eax
  0015a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@Maklocstr
  00160	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00165	58		 pop	 eax
  00166	5a		 pop	 edx
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016d	33 cd		 xor	 ecx, ebp
  0016f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00174	81 c4 44 01 00
	00		 add	 esp, 324		; 00000144H
  0017a	3b ec		 cmp	 ebp, esp
  0017c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
  00185	0f 1f 00	 npad	 3
$LN16@Maklocstr:
  00188	03 00 00 00	 DD	 3
  0018c	00 00 00 00	 DD	 $LN15@Maklocstr
$LN15@Maklocstr:
  00190	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00194	02 00 00 00	 DD	 2
  00198	00 00 00 00	 DD	 $LN12@Maklocstr
  0019c	a8 ff ff ff	 DD	 -88			; ffffffa8H
  001a0	08 00 00 00	 DD	 8
  001a4	00 00 00 00	 DD	 $LN13@Maklocstr
  001a8	80 ff ff ff	 DD	 -128			; ffffff80H
  001ac	08 00 00 00	 DD	 8
  001b0	00 00 00 00	 DD	 $LN14@Maklocstr
$LN14@Maklocstr:
  001b4	5f		 DB	 95			; 0000005fH
  001b5	4d		 DB	 77			; 0000004dH
  001b6	62		 DB	 98			; 00000062H
  001b7	73		 DB	 115			; 00000073H
  001b8	74		 DB	 116			; 00000074H
  001b9	32		 DB	 50			; 00000032H
  001ba	00		 DB	 0
$LN13@Maklocstr:
  001bb	5f		 DB	 95			; 0000005fH
  001bc	4d		 DB	 77			; 0000004dH
  001bd	62		 DB	 98			; 00000062H
  001be	73		 DB	 115			; 00000073H
  001bf	74		 DB	 116			; 00000074H
  001c0	31		 DB	 49			; 00000031H
  001c1	00		 DB	 0
$LN12@Maklocstr:
  001c2	5f		 DB	 95			; 0000005fH
  001c3	57		 DB	 87			; 00000057H
  001c4	63		 DB	 99			; 00000063H
  001c5	00		 DB	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 234  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __3FCAD62E_wchar@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	90		 npad	 1

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00022	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00025	d1 e0		 shl	 eax, 1
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 _memcpy
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  :     }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\gvent\OneDrive\Desktop\KPO\Lab1\Lab1\DateUtils.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C53B600F_DateUtils@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	90		 npad	 1
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\gvent\OneDrive\Desktop\KPO\Lab1\Lab1\DateUtils.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C53B600F_DateUtils@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	90		 npad	 1
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
